group 'org.skull.king'
version '1.0-SNAPSHOT'


buildscript {
    ext.kotlin_version = '1.4.10'
    ext.dagger_version = '2.13'
    ext.configPath = "$rootProject.projectDir/src/main/resources/"
    ext.dropwizard_version = '2.0.15'
    ext.liquibase_version = '3.8.8'
    ext.test_containers_version = '1.15.0'
    ext.postgres_driver_version = '42.1.4'
    ext.kotlinx_version = "1.4.1"
    ext.jackson_kotlin = "2.11.3"
    ext.firebase_version = '7.0.1'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'application'

sourceCompatibility = 11
mainClassName = 'org.skull.king.SkullKingApplication'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_kotlin"

    compile "io.dropwizard:dropwizard-core:$dropwizard_version"
    compile "io.dropwizard:dropwizard-auth:$dropwizard_version"

    api "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "com.google.firebase:firebase-admin:$firebase_version"

    compile files('db/jdbc/postgresql-42.2.18.jar')
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/source/kapt2/main"
        }
    }
}

// TEST
test {
    useJUnitPlatform()
}

dependencies {
    testCompile 'org.assertj:assertj-core:3.11.1'
    testImplementation("org.liquibase:liquibase-core:$liquibase_version")
    testImplementation("org.testcontainers:postgresql:$test_containers_version")

    testImplementation "io.mockk:mockk:1.10.2"
    testImplementation "org.awaitility:awaitility-kotlin:4.0.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "io.dropwizard:dropwizard-testing:$dropwizard_version"

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

task startMockFirebase {
    doFirst {
        ext.process = new ProcessBuilder()
                .directory(projectDir)
                .inheritIO()
                .command("bin/start-firebase-emulator")
                .start()
                .waitFor()
    }
}

task stopMockFirebase(type: Exec) {
    executable "bin/stop-firebase-emulator"
}
tasks.test.dependsOn(startMockFirebase)
test.finalizedBy(stopMockFirebase)

// FAT JAR
shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

// RUN
run {
    args 'server', configPath + 'dev.yml'
}

// STAGE for Heroku
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(stage)) {
        startMockFirebase.enabled = false
        stopMockFirebase.enabled = false
        test.enabled = false
    }
}

task stage {
    dependsOn build
}
